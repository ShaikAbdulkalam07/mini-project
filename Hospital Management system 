#include <stdio.h>
#include <string.h>

#define MAX_PATIENTS 100

// Structure to store patient information
struct Patient {
    int id;
    char name[50];
    int age;
    char disease[50];
};

// Declare array to hold patient records
struct Patient patients[MAX_PATIENTS];
int patientCount = 0;

// Function to add a new patient
void addPatient() {
    if (patientCount < MAX_PATIENTS) {
        struct Patient newPatient;
        
        printf("\nEnter Patient ID: ");
        scanf("%d", &newPatient.id);
        getchar(); // To consume newline character left by scanf

        printf("Enter Patient Name: ");
        fgets(newPatient.name, sizeof(newPatient.name), stdin);
        newPatient.name[strcspn(newPatient.name, "\n")] = 0; // Remove newline at the end

        printf("Enter Patient Age: ");
        scanf("%d", &newPatient.age);
        getchar();

        printf("Enter Patient Disease: ");
        fgets(newPatient.disease, sizeof(newPatient.disease), stdin);
        newPatient.disease[strcspn(newPatient.disease, "\n")] = 0; // Remove newline

        patients[patientCount] = newPatient;
        patientCount++;

        printf("\nPatient added successfully!\n");
    } else {
        printf("\nHospital is full, cannot add more patients.\n");
    }
}

// Function to display all patients
void displayPatients() {
    if (patientCount == 0) {
        printf("\nNo patients found.\n");
        return;
    }

    printf("\nList of Patients:\n");
    printf("ID\tName\t\tAge\tDisease\n");
    printf("--------------------------------------------\n");

    for (int i = 0; i < patientCount; i++) {
        printf("%d\t%s\t\t%d\t%s\n", patients[i].id, patients[i].name, patients[i].age, patients[i].disease);
    }
}

// Function to delete a patient record by ID
void deletePatient() {
    int id;
    printf("\nEnter the Patient ID to delete: ");
    scanf("%d", &id);

    int index = -1;
    for (int i = 0; i < patientCount; i++) {
        if (patients[i].id == id) {
            index = i;
            break;
        }
    }

    if (index == -1) {
        printf("\nPatient with ID %d not found.\n", id);
    } else {
        for (int i = index; i < patientCount - 1; i++) {
            patients[i] = patients[i + 1];
        }
        patientCount--;
        printf("\nPatient with ID %d has been deleted.\n", id);
    }
}

// Function to search a patient by ID
void searchPatient() {
    int id;
    printf("\nEnter the Patient ID to search: ");
    scanf("%d", &id);

    int index = -1;
    for (int i = 0; i < patientCount; i++) {
        if (patients[i].id == id) {
            index = i;
            break;
        }
    }

    if (index == -1) {
        printf("\nPatient with ID %d not found.\n", id);
    } else {
        printf("\nPatient Details:\n");
        printf("ID: %d\n", patients[index].id);
        printf("Name: %s\n", patients[index].name);
        printf("Age: %d\n", patients[index].age);
        printf("Disease: %s\n", patients[index].disease);
    }
}

// Main function to drive the program
int main() {
    int choice;

    while (1) {
        printf("\n===== Hospital Management System =====\n");
        printf("1. Add Patient\n");
        printf("2. Display Patients\n");
        printf("3. Delete Patient\n");
        printf("4. Search Patient\n");
        printf("5. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                addPatient();
                break;
            case 2:
                displayPatients();
                break;
            case 3:
                deletePatient();
                break;
            case 4:
                searchPatient();
                break;
            case 5:
                printf("Exiting Hospital Management System.\n");
                return 0;
            default:
                printf("\nInvalid choice! Please try again.\n");
        }
    }
    return 0;
}
